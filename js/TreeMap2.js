// Generated by CoffeeScript 1.10.0
(function() {
  var TreeMap2,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TreeMap2 = (function() {
    function TreeMap2(el, data) {
      var cell;
      this.el = el;
      this.data = data;
      this.zoom = bind(this.zoom, this);
      this.width = $(this.el).width();
      this.height = $(this.el).height();
      this.x = d3.scale.linear().range([0, this.width]);
      this.y = d3.scale.linear().range([0, this.height]);
      this.color = d3.scale.category20c();
      this.node = this.root = this.data;
      this.treemap = d3.layout.treemap().round(false).size([this.width, this.height]).sticky(true).value(function(d) {
        return d.size;
      });
      this.svg = d3.select(this.el).append("div").attr("class", "chart").style({
        width: this.width + "px",
        height: this.height + "px"
      }).append("svg:svg").attr("width", this.width).attr("height", this.height).append("svg:g").attr("transform", "translate(.5,.5)");
      this.nodes = this.treemap.nodes(this.data).filter(function(d) {
        return !d.children;
      });
      cell = this.svg.selectAll("g").data(this.nodes).enter().append("svg:g").attr("class", "cell").attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      }).on("click", (function(_this) {
        return function(d) {
          return _this.zoom(_this.node === d.parent ? _this.root : d.parent);
        };
      })(this));
      cell.append("svg:rect").attr({
        width: function(d) {
          return d.dx - 1;
        },
        height: function(d) {
          return d.dy - 1;
        },
        fill: (function(_this) {
          return function(d) {
            return _this.color(d.parent.name);
          };
        })(this)
      });
      cell.append("svg:text").attr({
        x: function(d) {
          return d.dx / 2;
        },
        y: function(d) {
          return d.dy / 2;
        },
        dy: ".35em",
        "text-anchor": "middle"
      }).text(function(d) {
        return d.name;
      }).style("opacity", function(d) {
        d.w = this.getComputedTextLength();
        if (d.dx > d.w) {
          return 1;
        } else {
          return 0;
        }
      });
      d3.select(this.el).on("click", (function(_this) {
        return function() {
          return _this.zoom(_this.root);
        };
      })(this));
    }

    TreeMap2.prototype.zoom = function(d) {
      var kx, ky, t;
      kx = this.width / d.dx;
      ky = this.height / d.dy;
      this.x.domain([d.x, d.x + d.dx]);
      this.y.domain([d.y, d.y + d.dy]);
      t = this.svg.selectAll("g.cell").transition().duration(750).attr("transform", (function(_this) {
        return function(d) {
          return "translate( " + (_this.x(d.x)) + ", " + (_this.y(d.y)) + ")";
        };
      })(this));
      t.select("rect").attr("width", function(d) {
        return kx * d.dx - 1;
      }).attr("height", function(d) {
        return ky * d.dy - 1;
      });
      t.select("text").attr("x", function(d) {
        return kx * d.dx / 2;
      }).attr("y", function(d) {
        return ky * d.dy / 2;
      }).style("opacity", function(d) {
        if (kx * d.dx > d.w) {
          return 1;
        } else {
          return 0;
        }
      });
      this.node = d;
      return d3.event && d3.event.stopPropagation();
    };

    TreeMap2.prototype.dimension_changed = function(valFn) {
      this.treemap.value(valFn).nodes(this.root);
      return this.zoom(this.node);
    };

    return TreeMap2;

  })();

  window.TreeMap2 = TreeMap2;

}).call(this);
